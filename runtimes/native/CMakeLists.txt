cmake_minimum_required(VERSION 3.10.0)

project(nux VERSION 0.0.1)

include(CheckCCompilerFlag)
function(enable_c_compiler_flag_if_supported flag)
    string(FIND "${CMAKE_C_FLAGS}" "${flag}" flag_already_set)
    if(flag_already_set EQUAL -1)
        check_c_compiler_flag("${flag}" flag_supported)
        if(flag_supported)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}" PARENT_SCOPE)
        endif()
        unset(flag_supported CACHE)
    endif()
endfunction()

enable_c_compiler_flag_if_supported("-Wall")
enable_c_compiler_flag_if_supported("-Wextra")
enable_c_compiler_flag_if_supported("-Werror")
enable_c_compiler_flag_if_supported("-Wno-unused-function")
enable_c_compiler_flag_if_supported("-Wno-unused-parameter")
enable_c_compiler_flag_if_supported("-Wno-unused-variable")
enable_c_compiler_flag_if_supported("-fsanitize=address")

# add_compile_options(-fsanitize=address)
# add_link_options(-fsanitize=address)
# add_compile_options(-pg)
# add_link_options(-pg)

# Add externals
include_directories(${CMAKE_SOURCE_DIR}/core)
include_directories(${CMAKE_SOURCE_DIR}/externals)
include_directories(${CMAKE_SOURCE_DIR}/externals/glfw-3.4/include)
include_directories(${CMAKE_SOURCE_DIR}/externals/tiny-fixedpoint-c/src)
file(GLOB SOURCES *.c)
add_executable(${PROJECT_NAME} ${SOURCES})
set(OpenGL_GL_PREFERENCE GLVND)
find_package(OpenGL REQUIRED)
if (UNIX)
    target_link_libraries(${PROJECT_NAME} core ${OPENGL_LIBRARIES} Xrandr X11 dl pthread glfw m)
endif (UNIX)
if (WIN32)
    target_link_libraries(${PROJECT_NAME} core ${OPENGL_LIBRARIES} glfw m)
endif (WIN32)
install(TARGETS ${PROJECT_NAME})
