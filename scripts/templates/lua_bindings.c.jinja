#include "internal.h"

static void l_checkerror(lua_State *L)
{
    if (!nux_error_get_status())
    {
        luaL_error(L, nux_error_get_message());
    }
}

{% set resmap = {
    "arena": "NUX_RESOURCE_ARENA",
    "texture": "NUX_RESOURCE_TEXTURE",
    "palette": "NUX_RESOURCE_PALETTE",
    "viewport": "NUX_RESOURCE_VIEWPORT",
    "mesh": "NUX_RESOURCE_MESH",
    "canvas": "NUX_RESOURCE_CANVAS",
    "scene": "NUX_RESOURCE_SCENE",
    "query": "NUX_RESOURCE_QUERY",
} %}

{% for module_name, module in modules.items() %}
{% for function in module.functions %}
static int l_{{ module_name }}_{{ function.name }}(lua_State *L)
{
    {# ARGUMENTS #}
    {%- set ns = namespace(stack = 1) %}
    {%- for arg in function.args -%}
        {%- if arg.typename.type == "primitive" %}
            {%- if arg.typename.name == "v2" %}
                nux_v2_t {{ arg.name }} = nux_lua_check_vec2(L, {{ ns.stack + 0}});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "v3" %}
                nux_v3_t {{ arg.name }} = nux_lua_check_vec3(L, {{ ns.stack + 0}});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "v4" %}
                nux_v4_t {{ arg.name }} = nux_lua_check_vec4(L, {{ ns.stack + 0}});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "m4" %}
                nux_m4_t {{ arg.name }} = nux_lua_check_mat4(L, {{ ns.stack + 0}});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "q4" %}
                nux_q4_t {{ arg.name }} = nux_lua_check_q4(L, {{ ns.stack + 0}});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "c8" %}
                const nux_c8_t *{{ arg.name }} = luaL_checkstring(L, {{ ns.stack }});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "rid" %}
                nux_rid_t {{ arg.name }} = (nux_rid_t)luaL_checknumber(L, {{ ns.stack }});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name == "nid" %}
                nux_nid_t {{ arg.name }} = (nux_nid_t)luaL_checknumber(L, {{ ns.stack }});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name in ["b32"] %}
                nux_b32_t {{ arg.name }} = lua_toboolean(L, {{ ns.stack }});
                {% set ns.stack = ns.stack + 1 %}
            {%- elif arg.typename.name != "void" %}
                nux_{{ arg.typename.name }}_t {{ arg.name }} = luaL_checknumber(L, {{ ns.stack }});
                {% set ns.stack = ns.stack + 1 %}
            {% endif %}
        {%- elif arg.typename.type == "resource" %}
            nux_{{ arg.typename.name }}_t *{{ arg.name}} = nux_resource_check({{ resmap.get(arg.typename.name) }}, luaL_checkinteger(L, {{ ns.stack }}));
            {% set ns.stack = ns.stack + 1 %}
        {%- endif %}
    {%- endfor -%}

    {# RETURN VALUE #}
    {%- if function.typename.name != "void" %}
        {%- if function.typename.type == "primitive" %}
            nux_{{ function.typename.name }}_t ret =
        {%- elif function.typename.type == "resource" %}
            const nux_{{ function.typename.name }}_t *ret =
        {%- endif %}
    {% endif %}

    {# FUNCTION CALL #}
    {{ "nux_" + module_name if module_name != "core" else "nux" }}_{{ function.name }}(
        {%- for arg in function.args -%}
            {{ arg.name }}{{ "," if not loop.last }}
        {%- endfor -%}
    );
    l_checkerror(L);

    {# RETURN VALUE #}
    {%- if function.typename.type == "primitive" %}
        {%- if function.typename.name in ["i8", "u8", "i32", "u32", "u64", "status"] %}
            lua_pushinteger(L, ret);
            return 1;
        {%- elif function.typename.name in ["f32"] %}
            lua_pushnumber(L, ret);
            return 1;
        {%- elif function.typename.name in ["b32"] %}
            lua_pushboolean(L, ret);
            return 1;
        {%- elif function.typename.name == "c8" %}
            lua_pushstring(L, ret);
            return 1;
        {%- elif function.typename.name in ["rid", "nid"] %}
            if (ret)
                lua_pushinteger(L, ret);
            else
                lua_pushnil(L);
            return 1;
        {%- elif function.typename.name == "v2" %}
            nux_lua_push_vec2(L, ret);
            return 1;
        {%- elif function.typename.name == "v3" %}
            nux_lua_push_vec3(L, ret);
            return 1;
        {%- elif function.typename.name == "v4" %}
            nux_lua_push_vec4(L, ret);
            return 1;
        {%- elif function.typename.name == "m4" %}
            nux_lua_push_mat4(L, ret);
            return 1;
        {%- elif function.typename.name == "q4" %}
            nux_lua_push_q4(L, ret);
            return 1;
        {%- elif function.typename.name == "raycast_hit" %}
            if (ret.node)
                nux_lua_push_hit(L, ret);
            else
                lua_pushnil(L);
            return 1;
        {%- elif function.typename.name == "void" %}
            return 0;
        {%- endif %}
    {%- elif function.typename.type == "resource" %}
        nux_rid_t ret_rid = nux_resource_rid(ret);
        if (ret_rid)
            lua_pushinteger(L, ret_rid);
        else
            lua_pushnil(L);
        return 1;
    {%- endif %}
}
{%- endfor %}
{% endfor %}

{% for module_name, module in modules.items() %}
static const struct luaL_Reg lib_{{ module_name }}[] = {
{% for function in module.functions -%}
{% if not function.hasptr -%}
    { "{{ function.name }}", l_{{ module_name }}_{{ function.name }} },
{%- endif -%}
{%- endfor -%}
    { NUX_NULL, NUX_NULL }
};
{% endfor %}

nux_status_t nux_lua_open_api(void)
{
    lua_State *L = nux_lua_module()->L;
{% for module_name, module in modules.items() %}
    lua_newtable(L);
    luaL_setfuncs(L, lib_{{ module_name }}, 0);
{% for constant in module.constants %}
    lua_pushinteger(L, {{ constant.value }}); 
    lua_setfield(L, -2, "{{ constant.name }}");
{% endfor %}
    lua_setglobal(L, "{{ module_name }}");
{% endfor %}
    return NUX_SUCCESS;
}
