#include "internal.h"

{% set checkmap = {
    "nux_i8_t": "luaL_checknumber",
    "nux_u8_t": "luaL_checknumber",
    "nux_i32_t": "luaL_checknumber",
    "nux_u32_t": "luaL_checknumber",
    "nux_f32_t": "luaL_checknumber",
} %}

{% set retmap = {
    "nux_i8_t": "lua_pushinteger",
    "nux_u8_t": "lua_pushinteger",
    "nux_b32_t": "lua_pushboolean",
    "nux_i32_t": "lua_pushinteger",
    "nux_u32_t": "lua_pushinteger",
    "nux_f32_t": "lua_pushnumber",
    "nux_status_t": "lua_pushinteger"
} %}

static void l_checkerror(lua_State *L, nux_ctx_t *ctx)
{
    if (!nux_error_get_status(ctx))
    {
        luaL_error(L, nux_error_get_message(ctx));
    }
}

{% for module, functions in modules.items() %}
{% for function in functions %}
static int l_{{ module }}_{{ function.name }}(lua_State *L)
{
    {%- set ns = namespace(stack = 1) %}
    nux_ctx_t *ctx = lua_getuserdata(L);
    {%- for arg in function.args -%}
        {%- if arg.typename == "nux_v3_t" %}
            nux_v3_t {{ arg.name }};
            {{ arg.name }}.x = luaL_checknumber(L, {{ ns.stack + 0 }});
            {{ arg.name }}.y = luaL_checknumber(L, {{ ns.stack + 1 }});
            {{ arg.name }}.z = luaL_checknumber(L, {{ ns.stack + 2 }});
            {% set ns.stack = ns.stack + 3 %}
        {%- elif arg.typename == "nux_q4_t" %}
            nux_q4_t {{ arg.name }};
            {{ arg.name }}.x = luaL_checknumber(L, {{ ns.stack + 0 }});
            {{ arg.name }}.y = luaL_checknumber(L, {{ ns.stack + 1 }});
            {{ arg.name }}.z = luaL_checknumber(L, {{ ns.stack + 2 }});
            {{ arg.name }}.w = luaL_checknumber(L, {{ ns.stack + 3 }});
            {% set ns.stack = ns.stack + 4 %}
        {%- elif arg.typename == "nux_c8_t" and arg.isptr %}
            const nux_c8_t *{{ arg.name }} = luaL_checkstring(L, {{ ns.stack }});
            {% set ns.stack = ns.stack + 1 %}
        {%- elif arg.typename == "nux_res_t" %}
            nux_res_t {{ arg.name }} = (nux_res_t)(nux_intptr_t)luaL_checknumber(L, {{ ns.stack }});
            {% set ns.stack = ns.stack + 1 %}
        {%- else %}
            {{ arg.typename }} {{ arg.name }} = {{ checkmap.get(arg.typename, "luaL_checkinteger") }}(L, {{ ns.stack }});
            {% set ns.stack = ns.stack + 1 %}
        {% endif %}
    {%- endfor -%}
    {%- if function.returntype != "void" %}
        {{ function.returntype }} ret =
    {% endif %}{{ "nux_" + module if module != "core" else "nux" }}_{{ function.name }}(ctx
    {%- for arg in function.args -%}
        , {{ arg.name }}
    {%- endfor -%}
    );
    l_checkerror(L, ctx);
    {%- if function.returntype == "nux_v3_t" %}
        lua_pushnumber(L, ret.x);
        lua_pushnumber(L, ret.y);
        lua_pushnumber(L, ret.z);
        return 3;
    {%- elif function.returntype == "nux_q4_t" %}
        lua_pushnumber(L, ret.x);
        lua_pushnumber(L, ret.y);
        lua_pushnumber(L, ret.z);
        lua_pushnumber(L, ret.w);
        return 4;
    {%- elif function.returntype == "nux_res_t" %}
        if (ret)
            lua_pushnumber(L, (nux_intptr_t)ret);
        else
            lua_pushnil(L);
        return 1;
    {%- elif function.returntype != "void" %}
        {{ retmap.get(function.returntype, "lua_pushinteger") }}(L, ret);
        return 1;
    {%- else %}
        return 0;
    {%- endif %}
}
{%- endfor %}
{% endfor %}

{% for module, functions in modules.items() %}
static const struct luaL_Reg lib_{{ module }}[] = {
{% for function in functions -%}
{% if not function.hasptr -%}
    { "{{ function.name }}", l_{{ module }}_{{ function.name }} },
{%- endif -%}
{%- endfor -%}
    { NUX_NULL, NUX_NULL }
};
{% endfor %}

nux_status_t nux_lua_open_{{ api_name }}(nux_ctx_t *ctx)
{
    lua_State *L = ctx->L;
    lua_getglobal(L, "nux");
{% for module in modules.keys() %}
{% if module == "core" %}
    luaL_setfuncs(L, lib_{{ module }}, 0);
{% else %}
    lua_newtable(L);
    luaL_setfuncs(L, lib_{{ module }}, 0);
    lua_setfield(L, -2, "{{ module }}");
{% endif %}
{% endfor %}
{% for constant in constants %}
{% for value in constant["values"] %}
    lua_pushinteger(L, {{ value.value }});
    lua_setfield(L, -2, "{{ value.name }}");
{% endfor %}
{% endfor %}
    lua_pop(L, 1);
    return NUX_SUCCESS;
}
