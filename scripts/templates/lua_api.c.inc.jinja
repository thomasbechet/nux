#include "internal.h"

{% set checkmap = {
    "nux_i8_t": "luaL_checkinteger",
    "nux_u8_t": "luaL_checkinteger",
    "nux_i32_t": "luaL_checkinteger",
    "nux_u32_t": "luaL_checkinteger",
    "nux_f32_t": "luaL_checknumber",
} %}

{% set retmap = {
    "nux_i8_t": "lua_pushinteger",
    "nux_u8_t": "lua_pushinteger",
    "nux_b32_t": "lua_pushboolean",
    "nux_i32_t": "lua_pushinteger",
    "nux_u32_t": "lua_pushinteger",
    "nux_f32_t": "lua_pushnumber",
    "nux_status_t": "lua_pushinteger"
} %}

{% for module, functions in modules.items() %}
{% for function in functions %}
{% if not function.hasptr %}
static int l_{{ module }}_{{ function.name }}(lua_State *L)
{
    {% set ns = namespace(stack = 1) %}
    lua_rawgeti(L, LUA_REGISTRYINDEX, 1);
    nux_env_t *env = lua_touserdata(L, -1);
    {%- for arg in function.args -%}
        {% if arg.typename == "nux_v3_t" %}
            nux_v3_t {{ arg.name }};
            {{ arg.name }}.x = luaL_checknumber(L, {{ ns.stack + 0 }});
            {{ arg.name }}.y = luaL_checknumber(L, {{ ns.stack + 1 }});
            {{ arg.name }}.z = luaL_checknumber(L, {{ ns.stack + 2 }});
            {% set ns.stack = ns.stack + 3 %}
        {% else %}
            {{ arg.typename }} {{ arg.name }} = {{ checkmap.get(arg.typename, "luaL_checkinteger") }}(L, {{ ns.stack }});
            {% set ns.stack = ns.stack + 1 %}
        {% endif %}
    {%- endfor -%}
    {% if function.returntype != "void" %}
        {{ function.returntype }} ret =
    {% endif %}
    {{ "nux_" + module if module != "core" else "nux" }}_{{ function.name }}(env
    {%- for arg in function.args -%}
        , {{ arg.name }}
    {%- endfor -%}
    );
    {% if function.returntype == "nux_v3_t" %}
        lua_pushnumber(L, ret.x);
        lua_pushnumber(L, ret.y);
        lua_pushnumber(L, ret.z);
        return 3;
    {% elif function.returntype != "void" %}
        {{ retmap.get(function.returntype, "lua_pushinteger") }}(L, ret);
        return 1;
    {% else %}
        return 0;
    {% endif %}
}
{% endif %}
{%- endfor %}
{% endfor %}

{% for module, functions in modules.items() %}
static const struct luaL_Reg lib_{{ module }}[] = {
{% for function in functions -%}
{% if not function.hasptr -%}
    { "{{ function.name }}", l_{{ module }}_{{ function.name }} },
{%- endif -%}
{%- endfor -%}
    { NUX_NULL, NUX_NULL }
};
{% endfor %}

nux_status_t nux_register_lua(nux_instance_t *inst)
{
    lua_newtable(inst->L);
{% for module in modules.keys() %}
{% if module == "core" %}
    luaL_setfuncs(inst->L, lib_{{ module }}, 0);
{% else %}
    lua_newtable(inst->L);
    luaL_setfuncs(inst->L, lib_{{ module }}, 0);
    lua_setfield(inst->L, -2, "{{ module }}");
{% endif %}
{% endfor %}
{% for constant in constants %}
{% for value in constant["values"] %}
    lua_pushinteger(inst->L, {{ value.value }});
    lua_setfield(inst->L, -2, "{{ value.name }}");
{% endfor %}
{% endfor %}
    lua_setglobal(inst->L, "nux");
    return NUX_SUCCESS;
}
