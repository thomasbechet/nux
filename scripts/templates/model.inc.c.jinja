#include <nux.h>

{% for obj in objects -%}
static nux_f32_t {{ name }}_{{ obj.name }}_positions[] = {
    {% for x, y, z in obj.positions -%}
        {{ x }},{{ y }},{{ z }}{{ ',' if not loop.last else '' }}
    {% endfor -%}
};
static nux_f32_t {{ name }}_{{ obj.name }}_uvs[] = {
    {% for u, v in obj.uvs -%}
        {{ u }},{{ v }}{{ ',' if not loop.last else '' }}
    {% endfor -%}
};
static nux_u8_t {{ name }}_{{ obj.name }}_texture[] = {
    {% for data in obj.tex -%}
        {{ '0x{:X}'.format(data) }}{{ ',' if not loop.last else '' }}
    {% endfor -%}
};
{% endfor -%}

static struct { 
    const nux_f32_t *positions;
    const nux_f32_t *uvs;
    nux_u32_t count;
    const nux_u8_t *tex;
    nux_u32_t texw;
    nux_u32_t texh;
} {{ name }}_objects[] = {
{% for obj in objects -%}
    { 
        .positions = {{ name }}_{{ obj.name }}_positions,
        .uvs = {{ name }}_{{ obj.name }}_uvs,
        .count = {{ obj.count }},
        .tex = {{ name }}_{{ obj.name }}_texture,
        .texw = {{ obj.texw }},
        .texh = {{ obj.texh }}
    }{{ ',' if not loop.last else '' }}
{% endfor -%}
};
static nux_u32_t {{ name }}_objects_count = {{ objects_count }};
static nux_u32_t {{ name }}_tex_x;
static nux_u32_t {{ name }}_tex_y;
void {{ name }}_load_texture(nux_env_t env, nux_u32_t x, nux_u32_t y)
{
    nux_write_texture(env,
        x, y, 
        {{ name }}_objects[i].texw, 
        {{ name }}_objects[i].texh,
        {{ name }}_objects[i].tex);
    {{ name }}_tex_x = x;
    {{ name }}_tex_y = y;
}
void draw_{{ name }}(nux_env_t env, const nux_f32_t *m, nux_u32_t wireframe)
{
    for (nux_u32_t i = 0; i < {{ name }}_objects_count; ++i)
    {
        nux_bind_texture(env,
            {{ name }}_tex_x, 
            {{ name }}_tex_y, 
            {{ name }}_objects[i].texw,
            {{ name }}_objects[i].texh,
            NUX_TEXTURE_COLOR);
        if (wireframe)
        {
             nux_mesh(env,
                {{ name }}_objects[i].positions,
                {{ name }}_objects[i].uvs,
                {{ name }}_objects[i].count,
                m);
        }
        else
        {
             nux_mesh_wire(env,
                {{ name }}_objects[i].positions,
                {{ name }}_objects[i].uvs,
                {{ name }}_objects[i].count,
                m);
        }
    }
}
